import { useState, useEffect } from 'react';
import { Button } from "@/components/ui/button";
import { Card, CardContent, CardDescription, CardFooter, CardHeader, CardTitle } from "@/components/ui/card";
import { Textarea } from "@/components/ui/textarea";
import { Input } from "@/components/ui/input";
import { 
  Wand2, 
  Zap, 
  BrainCircuit, 
  Type, 
  MoreHorizontal, 
  Sparkles, 
  Loader2, 
  ArrowLeft, 
  Check, 
  RefreshCw
} from "lucide-react";
import { useToast } from "@/components/ui/use-toast";
import { 
  Select, 
  SelectContent, 
  SelectItem, 
  SelectTrigger, 
  SelectValue 
} from "@/components/ui/select";
import { 
  buildPrompt, 
  ContentCategory,
  Platform,
  ToneOfVoice,
  AudienceType,
  promptTemplates
} from "@/services/ai-prompts-service";
import { generateContent } from '@/services/ai-generation-service';
import { Tabs, TabsContent, TabsList, TabsTrigger } from "@/components/ui/tabs";

// Map suggestion types to AI prompt actions
const suggestionToAction: Record<SuggestionType, string> = {
  'improve': 'improve',
  'expand': 'expand',
  'summarize': 'shorten',
  'headlines': 'generate-headline',
  'localize': 'rephrase',
  'personalize': 'tone-shift'
};

type SuggestionType = 'improve' | 'expand' | 'summarize' | 'localize' | 'personalize' | 'headlines';

interface SuggestionOption {
  id: SuggestionType;
  icon: React.ReactNode;
  label: string;
  description: string;
}

const suggestions: SuggestionOption[] = [
  {
    id: 'improve',
    icon: <Wand2 className="h-4 w-4" />,
    label: 'F√∂rb√§ttra skrivning',
    description: 'F√∂rb√§ttra text med f√∂rslag p√• grammatik, tydlighet och stil.'
  },
  {
    id: 'expand',
    icon: <Zap className="h-4 w-4" />,
    label: 'Expandera inneh√•ll',
    description: 'Ut√∂ka ditt inneh√•ll med fler relevanta detaljer.'
  },
  {
    id: 'summarize',
    icon: <Type className="h-4 w-4" />,
    label: 'Sammanfatta',
    description: 'Skapa en kortare version som beh√•ller nyckelinneh√•llet.'
  },
  {
    id: 'headlines',
    icon: <Sparkles className="h-4 w-4" />,
    label: 'F√∂resl√• rubriker',
    description: 'Generera engagerande rubrikalternativ f√∂r ditt inneh√•ll.'
  },
  {
    id: 'localize',
    icon: <BrainCircuit className="h-4 w-4" />,
    label: 'Lokalisera',
    description: 'Anpassa inneh√•ll f√∂r svenska m√•lgrupper och kontext.'
  },
  {
    id: 'personalize',
    icon: <MoreHorizontal className="h-4 w-4" />,
    label: 'Personalisera',
    description: 'Anpassa ton och stil baserat p√• m√•lgruppsinformation.'
  }
];

// Content categories for AI assistant
const contentCategories: { value: ContentCategory; label: string }[] = [
  { value: 'headline', label: 'Rubrik' },
  { value: 'body', label: 'Br√∂dtext' },
  { value: 'tagline', label: 'Slogan' },
  { value: 'call-to-action', label: 'Call-to-action' },
  { value: 'product-description', label: 'Produktbeskrivning' },
  { value: 'story', label: 'Ber√§ttelse' },
  { value: 'persuasive', label: '√ñvertygande' },
  { value: 'educational', label: 'Utbildande' },
  { value: 'announcement', label: 'Tillk√§nnagivande' }
];

// Platform options
const platformOptions: { value: Platform; label: string }[] = [
  { value: 'general', label: 'Generellt' },
  { value: 'instagram', label: 'Instagram' },
  { value: 'facebook', label: 'Facebook' },
  { value: 'linkedin', label: 'LinkedIn' },
  { value: 'twitter', label: 'Twitter' },
  { value: 'tiktok', label: 'TikTok' },
  { value: 'blog', label: 'Blogg' },
  { value: 'email', label: 'E-post' }
];

// Tone of voice options
const toneOptions: { value: ToneOfVoice; label: string }[] = [
  { value: 'professional', label: 'Professionell' },
  { value: 'casual', label: 'Avslappnad' },
  { value: 'formal', label: 'Formell' },
  { value: 'friendly', label: 'V√§nlig' },
  { value: 'humorous', label: 'Humoristisk' },
  { value: 'inspirational', label: 'Inspirerande' },
  { value: 'authoritative', label: 'Auktoritativ' },
  { value: 'empathetic', label: 'Empatisk' }
];

// Audience options
const audienceOptions: { value: AudienceType; label: string }[] = [
  { value: 'general', label: 'Allm√§n publik' },
  { value: 'business', label: 'F√∂retag' },
  { value: 'consumer', label: 'Konsumenter' },
  { value: 'technical', label: 'Teknisk publik' },
  { value: 'creative', label: 'Kreativa personer' },
  { value: 'executives', label: 'Chefer och beslutsfattare' },
  { value: 'millennials', label: 'Millennials' },
  { value: 'gen-z', label: 'Generation Z' }
];

export interface EnhancedAIAssistantProps {
  currentContent?: string;
  onApplySuggestion?: (newContent: string) => void;
  selectedPlatform?: string;
}

export function EnhancedAIAssistant({ 
  currentContent = '', 
  onApplySuggestion,
  selectedPlatform
}: EnhancedAIAssistantProps) {
  const { toast } = useToast();
  const [activeTab, setActiveTab] = useState<'quick' | 'advanced'>('quick');
  
  // Quick tab state
  const [selectedSuggestion, setSelectedSuggestion] = useState<SuggestionType | null>(null);
  const [prompt, setPrompt] = useState('');
  
  // Advanced tab state
  const [contentCategory, setContentCategory] = useState<ContentCategory>('body');
  const [platform, setPlatform] = useState<Platform>(selectedPlatform as Platform || 'general');
  const [tone, setTone] = useState<ToneOfVoice>('professional');
  const [audience, setAudience] = useState<AudienceType>('general');
  const [customPrompt, setCustomPrompt] = useState('');
  const [selectedTemplate, setSelectedTemplate] = useState('');
  
  // Shared state
  const [isGenerating, setIsGenerating] = useState(false);
  const [generatedContent, setGeneratedContent] = useState('');

  // Update platform when selectedPlatform prop changes
  useEffect(() => {
    if (selectedPlatform && Object.values(platformOptions).some(opt => opt.value === selectedPlatform)) {
      setPlatform(selectedPlatform as Platform);
    }
  }, [selectedPlatform]);

  // Use AI generation service for content enhancement

  const generateSuggestion = async () => {
    if (!currentContent) {
      toast({
        title: "Inget inneh√•ll att f√∂rb√§ttra",
        description: "L√§gg till inneh√•ll f√∂rst innan du anv√§nder AI-assistenten.",
        variant: "destructive"
      });
      return;
    }

    setIsGenerating(true);
    
    // Determine the action based on the active tab and selection
    let action = 'improve';
    
    if (activeTab === 'quick' && selectedSuggestion) {
      // Map selected suggestion to action
      action = suggestionToAction[selectedSuggestion];
    }
    
    try {
      // Create request object for AI generation service
      const request = {
        action,
        content: currentContent,
        platform,
        tone,
        audience,
        contentCategory,
        customInstructions: activeTab === 'quick' ? prompt : customPrompt
      };
      
      // Special handling for templates
      if (activeTab === 'advanced' && selectedTemplate) {
        // Use a template from the prompt library
        const template = promptTemplates.find(t => t.id === selectedTemplate);
        if (template) {
          request.action = 'template';
          request.customInstructions = template.prompt;
          
          // Set relevant parameters for context
          request.platform = template.platform;
          if (template.tone) request.tone = template.tone;
          if (template.audience) request.audience = template.audience;
          
          // Update UI state to reflect template settings
          setPlatform(template.platform);
          if (template.tone) setTone(template.tone);
          if (template.audience) setAudience(template.audience);
        }
      }
      
      // Call the AI generation service
      const response = await generateContent(request);
      
      // Set the generated content
      setGeneratedContent(response.generatedContent);
      
      // Optional: Log usage metrics for development/testing
      if (process.env.NODE_ENV === 'development') {
        console.log('AI Generation Usage:', {
          tokens: response.usageTokens,
          duration: response.duration
        });
      }
    } catch (error) {
      console.error('Error generating content:', error);
      toast({
        title: "Fel vid generering",
        description: "Ett fel uppstod n√§r inneh√•llet skulle genereras. F√∂rs√∂k igen.",
        variant: "destructive"
      });
    } finally {
      setIsGenerating(false);
    }
  };

  // Helper function to generate random headlines based on platform and tone
  function getRandomHeadline(platform: Platform, tone: ToneOfVoice): string {
    const linkedinHeadlines = [
      "5 strategier som revolutionerar din karri√§r inom branschen",
      "Ny forskning visar: S√• √∂kar du produktiviteten med 35%",
      "D√§rf√∂r √∂vertr√§ffar v√•ra kunder branschgenomsnittet med 28%",
      "Framtidens arbetsplats: Tre trender varje ledare m√•ste f√∂rst√•",
      "Exklusiv rapport: Detta kommer f√∂r√§ndra marknaden inom 6 m√•nader"
    ];
    
    const instagramHeadlines = [
      "‚ú® F√∂r√§ndra ditt liv med dessa enkla steg ‚ú®",
      "Hemligheten bakom framg√•ng üîë - swipa f√∂r att se!",
      "F√∂r otroliga resultat üöÄ - prova detta!",
      "Den ultimata guiden f√∂r att n√• dina m√•l üíØ",
      "3 saker framg√•ngsrika personer g√∂r varje morgon ‚òÄÔ∏è"
    ];
    
    const facebookHeadlines = [
      "Du kommer inte tro vad som h√§nder n√§r du b√∂rjar med detta...",
      "Vi avsl√∂jar: Detta √§r hemligheten bakom framg√•ng",
      "STORA NYHETER! Vi lanserar √§ntligen...",
      "Har du testat detta? 9 av 10 rekommenderar!",
      "S√• enkelt kan du f√∂rb√§ttra ditt liv ‚Äì steg f√∂r steg guide"
    ];
    
    // Select headline pool based on platform
    let headlines: string[] = [];
    
    if (platform === 'linkedin') {
      headlines = linkedinHeadlines;
    } else if (platform === 'instagram') {
      headlines = instagramHeadlines;
    } else if (platform === 'facebook') {
      headlines = facebookHeadlines;
    } else {
      // Default headline pool
      headlines = [
        "Revolutionera din strategi: Nya insikter f√∂r 2025",
        "Framg√•ng garanterad: 5 steg till b√§ttre resultat",
        "Expertens hemlighet: S√• n√•r du dina m√•l snabbare",
        "Vad de inte ber√§ttar om framg√•ng: Insikter fr√•n branschexperter",
        "Den ultimata guiden: Fr√•n nyb√∂rjare till expert p√• rekordtid"
      ];
    }
    
    // Apply tone adjustments (simplified)
    const randomIndex = Math.floor(Math.random() * headlines.length);
    let headline = headlines[randomIndex];
    
    if (tone === 'formal') {
      headline = headline.replace(/revolutionera/i, "transformera").replace(/otroliga/i, "exceptionella");
    } else if (tone === 'humorous') {
      headline = headline.replace(/strategi/i, "hemliga recept").replace(/insikter/i, "aha-upplevelser");
    }
    
    return headline;
  }
  
  // Helper function to get CTA based on platform and tone
  function getCTA(platform: Platform, tone: ToneOfVoice): string {
    let cta = "CALL TO ACTION:\n\n";
    
    if (platform === 'instagram') {
      cta += "üëâ Dubbeltryck f√∂r att gilla och kommentera nedan vad du tycker! Tagga en v√§n som beh√∂ver se detta! üëá";
    } else if (platform === 'linkedin') {
      cta += "Vad tycker du? Dela g√§rna dina erfarenheter i kommentarsf√§ltet nedan. Om du fann detta v√§rdefullt, uppskatta jag om du delar det med ditt n√§tverk.";
    } else if (platform === 'facebook') {
      cta += "Gilla, kommentera och dela om du h√•ller med! Tagga n√•gon som beh√∂ver se detta. ‚ù§Ô∏è";
    } else if (platform === 'twitter') {
      cta += "Retweeta om du h√•ller med! F√∂lj f√∂r fler insikter. #innovation #framtid";
    } else if (platform === 'email') {
      cta += "Klicka h√§r f√∂r att ta del av v√•rt exklusiva erbjudande ‚Äì endast tillg√§ngligt de n√§sta 48 timmarna!";
    } else {
      cta += "Kontakta oss idag f√∂r att ta n√§sta steg mot dina m√•l!";
    }
    
    // Adjust based on tone
    if (tone === 'formal') {
      cta = cta.replace(/Tagga/g, "N√§mn").replace(/Gilla/g, "Visa uppskattning");
    } else if (tone === 'humorous') {
      cta = cta.replace(/beh√∂ver se detta/g, "beh√∂ver detta i sitt liv").replace(/Kontakta oss/g, "Sl√§ng iv√§g ett meddelande");
    }
    
    return cta;
  }
  
  // Helper function to get random taglines based on tone
  function getRandomTagline(tone: ToneOfVoice): string {
    const professionalTaglines = [
      "Expertis. Innovation. Resultat.",
      "F√∂rverkliga potentialen. Uppn√• excellens.",
      "Din partner f√∂r h√•llbar framg√•ng.",
      "Framtidss√§kra din verksamhet.",
      "Precision i varje detalj."
    ];
    
    const casualTaglines = [
      "G√∂r livet enklare. Varje dag.",
      "Vi fixar det. Du njuter.",
      "K√§nn skillnaden direkt!",
      "F√∂r alla som vill ha mer.",
      "Livet √§r f√∂r kort f√∂r kr√•ngel."
    ];
    
    const inspirationalTaglines = [
      "Dr√∂mmar blir verklighet. Varje dag.",
      "Inspirera. Skapa. F√∂r√§ndra.",
      "Sikta h√∂gre. N√• l√§ngre.",
      "Om√∂jligt √§r bara ett ord.",
      "F√∂rvandla visioner till verklighet."
    ];
    
    let taglines: string[];
    
    if (tone === 'professional' || tone === 'formal' || tone === 'authoritative') {
      taglines = professionalTaglines;
    } else if (tone === 'casual' || tone === 'friendly' || tone === 'humorous') {
      taglines = casualTaglines;
    } else {
      taglines = inspirationalTaglines;
    }
    
    const randomIndex = Math.floor(Math.random() * taglines.length);
    return taglines[randomIndex];
  }
  
  // Helper function to create a product description
  function getProductDescription(platform: Platform, tone: ToneOfVoice, audience: AudienceType): string {
    let description = "";
    
    // Base description
    const baseDesc = "V√•r revolutionerande produkt kombinerar banbrytande teknologi med elegant design f√∂r att ge dig en o√∂vertr√§ffad upplevelse. Med fokus p√• anv√§ndarv√§nlighet, h√•llbarhet och prestanda har vi skapat n√•got som verkligen f√∂r√§ndrar hur du interagerar med vardagen.";
    
    // Modify for platform
    if (platform === 'instagram') {
      description = `${baseDesc} Perfekt f√∂r den moderna livsstilen och ett m√•ste f√∂r alla som v√§rdes√§tter b√•de form och funktion. Swipa f√∂r att se fler bilder och uppt√§ck varf√∂r alla pratar om den! ‚ú® #innovation #design #kvalitet`;
    } else if (platform === 'linkedin') {
      description = `${baseDesc} V√•ra kunder rapporterar en produktivitets√∂kning p√• upp till 27% efter implementering. ROI har i genomsnitt uppn√•tts inom 4,5 m√•nader, vilket g√∂r denna investering till en sj√§lvklarhet f√∂r fram√•tstr√§vande organisationer.`;
    } else {
      description = baseDesc;
    }
    
    // Adjust for audience
    if (audience === 'technical') {
      description += " Med avancerade algoritmer och optimerad prestanda √∂vertr√§ffar den branschstandarden med 35% samtidigt som energif√∂rbrukningen minskas med 40%.";
    } else if (audience === 'business') {
      description += " Strategiskt implementerad i er verksamhet kan den reducera operativa kostnader samtidigt som kundn√∂jdheten √∂kar - en direkt positiv inverkan p√• b√•de topline och bottomline.";
    } else if (audience === 'gen-z') {
      description += " Den √§r inte bara smart, utan ocks√• helt anpassningsbar f√∂r att matcha din personliga stil. Och ja, den √§r sj√§lvklart klimatsmart ocks√•! Styla den, dela den, √§lska den.";
    }
    
    // Final tone adjustments
    if (tone === 'humorous') {
      description = description.replace("revolutionerande", "sjukt coola").replace("banbrytande teknologi", "teknik som f√•r raketer att se tr√•kiga ut");
    } else if (tone === 'formal') {
      description = description.replace("ger dig", "tillhandah√•ller").replace("n√•got som verkligen f√∂r√§ndrar", "en innovation som transformerar");
    }
    
    return description;
  }
  
  // Helper function to enhance content based on platform
  function getEnhancedContent(content: string, platform: Platform): string {
    let enhanced = content;
    
    // Platform-specific enhancements
    if (platform === 'instagram') {
      enhanced = enhanced.replace(/\. /g, "! ").replace(/\./g, "! ");
      enhanced += "\n\n#content #engagement #quality";
    } else if (platform === 'linkedin') {
      enhanced = "K√§ra anslutningar,\n\n" + enhanced;
      enhanced += "\n\nVad anser ni om detta? Dela g√§rna era insikter i kommentarerna.";
    } else if (platform === 'twitter') {
      // Ensure it's within Twitter's character limit
      if (enhanced.length > 280) {
        enhanced = enhanced.substring(0, 277) + "...";
      }
    }
    
    return enhanced;
  }

  const handleResetSelection = () => {
    setSelectedSuggestion(null);
    setGeneratedContent('');
    setPrompt('');
    setCustomPrompt('');
    setSelectedTemplate('');
  };

  const handleApplySuggestion = () => {
    if (onApplySuggestion && generatedContent) {
      onApplySuggestion(generatedContent);
      
      // Construct message based on active tab
      let message = "";
      if (activeTab === 'quick' && selectedSuggestion) {
        message = `${suggestions.find(s => s.id === selectedSuggestion)?.label} har till√§mpats p√• ditt inneh√•ll.`;
      } else {
        message = "Optimerat inneh√•ll har till√§mpats.";
      }
      
      toast({
        title: "F√∂rslag till√§mpat",
        description: message
      });
      
      handleResetSelection();
    }
  };

  return (
    <Card className="h-full border-primary/20">
      <CardHeader className="pb-3">
        <CardTitle className="text-lg font-semibold flex items-center">
          <BrainCircuit className="mr-2 h-5 w-5 text-primary" />
          AI-Assistent 2.0
        </CardTitle>
        <CardDescription>
          Skapa, optimera och anpassa ditt inneh√•ll med AI
        </CardDescription>
      </CardHeader>
      <CardContent className="pb-3">
        {/* Tabs for quick vs advanced */}
        {!selectedSuggestion && !generatedContent && (
          <Tabs value={activeTab} onValueChange={(value) => setActiveTab(value as 'quick' | 'advanced')} className="mb-4">
            <TabsList className="grid w-full grid-cols-2">
              <TabsTrigger value="quick">Snabbstart</TabsTrigger>
              <TabsTrigger value="advanced">Avancerad</TabsTrigger>
            </TabsList>
          </Tabs>
        )}
        
        {activeTab === 'quick' && !selectedSuggestion && !generatedContent && (
          // Visa lista med snabba f√∂rslag
          <div className="space-y-2">
            {suggestions.map((suggestion) => (
              <button
                key={suggestion.id}
                onClick={() => setSelectedSuggestion(suggestion.id)}
                className="w-full p-3 text-left rounded-md hover:bg-primary/10 transition-colors border border-transparent hover:border-primary/20"
              >
                <div className="flex items-center">
                  <div className="mr-3 h-8 w-8 rounded-full bg-primary/10 flex items-center justify-center text-primary">
                    {suggestion.icon}
                  </div>
                  <div>
                    <div className="font-medium">{suggestion.label}</div>
                    <div className="text-xs text-muted-foreground">{suggestion.description}</div>
                  </div>
                </div>
              </button>
            ))}
          </div>
        )}
        
        {activeTab === 'advanced' && !selectedSuggestion && !generatedContent && (
          // Advanced options form
          <div className="space-y-4">
            <div className="space-y-2">
              <label className="text-sm font-medium">Inneh√•llstyp</label>
              <Select value={contentCategory} onValueChange={(value) => setContentCategory(value as ContentCategory)}>
                <SelectTrigger>
                  <SelectValue placeholder="V√§lj inneh√•llstyp" />
                </SelectTrigger>
                <SelectContent>
                  {contentCategories.map((category) => (
                    <SelectItem key={category.value} value={category.value}>
                      {category.label}
                    </SelectItem>
                  ))}
                </SelectContent>
              </Select>
            </div>
            
            <div className="space-y-2">
              <label className="text-sm font-medium">Plattform</label>
              <Select value={platform} onValueChange={(value) => setPlatform(value as Platform)}>
                <SelectTrigger>
                  <SelectValue placeholder="V√§lj plattform" />
                </SelectTrigger>
                <SelectContent>
                  {platformOptions.map((option) => (
                    <SelectItem key={option.value} value={option.value}>
                      {option.label}
                    </SelectItem>
                  ))}
                </SelectContent>
              </Select>
            </div>
            
            <div className="space-y-2">
              <label className="text-sm font-medium">Ton</label>
              <Select value={tone} onValueChange={(value) => setTone(value as ToneOfVoice)}>
                <SelectTrigger>
                  <SelectValue placeholder="V√§lj ton" />
                </SelectTrigger>
                <SelectContent>
                  {toneOptions.map((option) => (
                    <SelectItem key={option.value} value={option.value}>
                      {option.label}
                    </SelectItem>
                  ))}
                </SelectContent>
              </Select>
            </div>
            
            <div className="space-y-2">
              <label className="text-sm font-medium">M√•lgrupp</label>
              <Select value={audience} onValueChange={(value) => setAudience(value as AudienceType)}>
                <SelectTrigger>
                  <SelectValue placeholder="V√§lj m√•lgrupp" />
                </SelectTrigger>
                <SelectContent>
                  {audienceOptions.map((option) => (
                    <SelectItem key={option.value} value={option.value}>
                      {option.label}
                    </SelectItem>
                  ))}
                </SelectContent>
              </Select>
            </div>
            
            <div className="space-y-2">
              <label className="text-sm font-medium">Anpassad instruktion (valfri)</label>
              <Textarea
                placeholder="Beskriv hur du vill att AI ska anpassa inneh√•llet..."
                value={customPrompt}
                onChange={(e) => setCustomPrompt(e.target.value)}
                rows={3}
              />
            </div>
            
            <div className="space-y-2">
              <label className="text-sm font-medium">Eller v√§lj en prompt-mall</label>
              <Select value={selectedTemplate} onValueChange={setSelectedTemplate}>
                <SelectTrigger>
                  <SelectValue placeholder="V√§lj en f√§rdig mall (valfritt)" />
                </SelectTrigger>
                <SelectContent>
                  <SelectItem value="">Ingen mall</SelectItem>
                  {promptTemplates.map((template) => (
                    <SelectItem key={template.id} value={template.id}>
                      {template.title}
                    </SelectItem>
                  ))}
                </SelectContent>
              </Select>
              {selectedTemplate && (
                <div className="text-xs text-muted-foreground">
                  {promptTemplates.find(t => t.id === selectedTemplate)?.description}
                </div>
              )}
            </div>
            
            <Button 
              className="w-full" 
              onClick={generateSuggestion}
              disabled={isGenerating}
            >
              {isGenerating ? (
                <>
                  <Loader2 className="mr-2 h-4 w-4 animate-spin" />
                  Genererar...
                </>
              ) : (
                <>
                  <Wand2 className="mr-2 h-4 w-4" />
                  Generera inneh√•ll
                </>
              )}
            </Button>
          </div>
        )}
        
        {activeTab === 'quick' && selectedSuggestion && !generatedContent && (
          // Show prompt input and generate button for quick options
          <div className="space-y-3">
            <div className="flex items-center justify-between">
              <div className="font-medium flex items-center">
                {suggestions.find(s => s.id === selectedSuggestion)?.icon}
                <span className="ml-2">{suggestions.find(s => s.id === selectedSuggestion)?.label}</span>
              </div>
              <Button variant="ghost" size="sm" onClick={handleResetSelection}>
                <ArrowLeft className="mr-2 h-4 w-4" />
                Tillbaka
              </Button>
            </div>
            
            {/* Platform and tone options for quick suggestions */}
            <div className="grid grid-cols-2 gap-2">
              <div className="space-y-1">
                <label className="text-xs font-medium">Plattform</label>
                <Select value={platform} onValueChange={(value) => setPlatform(value as Platform)}>
                  <SelectTrigger className="h-8 text-xs">
                    <SelectValue placeholder="V√§lj plattform" />
                  </SelectTrigger>
                  <SelectContent>
                    {platformOptions.map((option) => (
                      <SelectItem key={option.value} value={option.value}>
                        {option.label}
                      </SelectItem>
                    ))}
                  </SelectContent>
                </Select>
              </div>
              
              <div className="space-y-1">
                <label className="text-xs font-medium">Ton</label>
                <Select value={tone} onValueChange={(value) => setTone(value as ToneOfVoice)}>
                  <SelectTrigger className="h-8 text-xs">
                    <SelectValue placeholder="V√§lj ton" />
                  </SelectTrigger>
                  <SelectContent>
                    {toneOptions.map((option) => (
                      <SelectItem key={option.value} value={option.value}>
                        {option.label}
                      </SelectItem>
                    ))}
                  </SelectContent>
                </Select>
              </div>
            </div>
            
            <div className="space-y-2">
              <Input
                placeholder="Valfritt: ge specifika instruktioner..."
                value={prompt}
                onChange={(e) => setPrompt(e.target.value)}
              />
              <Button 
                className="w-full" 
                onClick={generateSuggestion}
                disabled={isGenerating}
              >
                {isGenerating ? (
                  <>
                    <Loader2 className="mr-2 h-4 w-4 animate-spin" />
                    Genererar...
                  </>
                ) : (
                  <>
                    <Wand2 className="mr-2 h-4 w-4" />
                    Generera f√∂rslag
                  </>
                )}
              </Button>
            </div>
          </div>
        )}
        
        {generatedContent && (
          // Show generated content
          <div className="space-y-3">
            <div className="flex items-center justify-between">
              <div className="font-medium flex items-center">
                {activeTab === 'quick' ? (
                  suggestions.find(s => s.id === selectedSuggestion)?.icon
                ) : (
                  <Wand2 className="h-4 w-4" />
                )}
                <span className="ml-2">
                  {activeTab === 'quick' 
                    ? suggestions.find(s => s.id === selectedSuggestion)?.label
                    : 'Anpassat inneh√•ll'
                  }
                </span>
              </div>
              <div className="flex gap-1">
                <Button 
                  variant="outline" 
                  size="sm" 
                  onClick={generateSuggestion} 
                  className="h-8 px-2 text-xs"
                  disabled={isGenerating}
                >
                  <RefreshCw className="h-3 w-3 mr-1" />
                  Generera ny
                </Button>
                <Button variant="ghost" size="sm" onClick={handleResetSelection} className="h-8">
                  Tillbaka
                </Button>
              </div>
            </div>
            <div className="p-3 rounded-md bg-primary/5 border border-primary/10 text-sm whitespace-pre-wrap">
              {generatedContent}
            </div>
          </div>
        )}
      </CardContent>
      {generatedContent && (
        <CardFooter>
          <Button 
            onClick={handleApplySuggestion} 
            className="w-full"
          >
            <Check className="mr-2 h-4 w-4" />
            Till√§mpa f√∂rslag
          </Button>
        </CardFooter>
      )}
    </Card>
  );
}